(define (if? expr) (tagged-list? expr 'if))
(define if-test cadr)
(define if-consequent caddr)
(define if-alternative cadddr)

(define (emit-if stack-index env expr tail)
  (let ((alt-label (unique-label "alternative"))
        (end-label (unique-label "end")))
    (if (predicate? (if-test expr))
      (let ((name (car (if-test expr)))
            (args (cdr (if-test expr))))
        (emit-comment "predicate if, " name)
        ((lookup-raw-predicate name) stack-index env args)
        (emit-comment "end predicate if, " name))
      (begin
        (emit-comment "if")
        (emit-expr stack-index env (if-test expr) #f)
        (print "  cmp eax, " (immediate-rep #t))
        (emit-comment "end if")))
    (print "  jne " alt-label)
    (emit-expr stack-index env (if-consequent expr) tail)
    (print "  jmp " end-label)
    (print alt-label ":")
    (emit-expr stack-index env (if-alternative expr) tail)
    (print end-label ":")))
